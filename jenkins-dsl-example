/**

template should not have a "Poll SCM" Build Trigger, "triggers{scm()}" appends, does not replace 

do not set timeout in template, timeout() does not override
**/

/**

TODO: Generate job configuration map by iterating over hosts and products, then use the map
to create jobs. This allows a single job to be manually defined.
[
    'integrate.toxodb.org' : [
        webapp:'toxo',
        scmSchedule:'1/5 ',
    ]
]
**/



def jenkins = hudson.model.Hudson.instance

/**
  Jenkins' Groovy plugin requirement: Get handle on out so we can pass to classes
  so println in Classes will send output to the script console,
  http://stackoverflow.com/questions/7742472/groovy-script-in-jenkins-println-output-disappears-when-called-inside-class-envi
  http://mriet.wordpress.com/2011/06/23/groovy-jenkins-system-script/
**/
def config = new HashMap()
config.putAll(getBinding().getVariables())
def console = config['out']


def products = ["AmoebaDB", "CryptoDB"]

def hostnames =  ["q1", "q2", "integrate"]

/**
webappForProduct = [
  AmoebaDB:"amoeba", 
  CryptoDB:"cryptodb",
  EuPathDB:"eupathdb",
  GiardiaDB:"giardiadb",
  HostDB:"hostdb",
  MicrosporidiaDB:"micro",
  PiroplasmaDB:"piro",
  PlasmoDB:"plasmo",
  ToxoDB:"toxo",
  TrichDB:"trichdb",
  TriTrypDB:"tritrypdb",
  FungiDB:"fungidb"
]
**/

webappForProduct = [
  CryptoDB:"cryptodb",
]

productSpecificConfig = [
  AmoebaDB : [
    webapp : "amoeba", 
  ],
  CryptoDB : [
    webapp : "cryptodb",
  ],
  EuPathDB : [
    webapp : "eupathdb",
  ],
  GiardiaDB : [
    webapp : "giardiadb",
  ],
  HostDB : [
    webapp : "hostdb",
  ],
  MicrosporidiaDB : [
    webapp : "micro",
  ],
  PiroplasmaDB : [
    webapp : "piro",
  ],
  PlasmoDB : [
    webapp : "plasmo",
  ],
  ToxoDB : [
    webapp : "toxo",
  ],
  TrichDB : [
    webapp : "trichdb",
  ],
  TriTrypDB : [
    webapp : "tritrypdb",
  ],
  FungiDB : [
    webapp : "fungidb"
  ],
]

hostSpecificConfig = [
  integrate : [
    scmSchedule : '*/5 * * * *',
    rebuilderStep: Values.rebuilderStepForIntegration,
    testngStep: Values.testngStepForIntegration,
    jabberContacts: ['a@b.com', 'c@d.com']
  ],
  a1 : [
    scmSchedule : '0 3 * * *',
    rebuilderStep: Values.rebuilderStepForWww,
    testngStep: Values.testngStepForIntegration,
    jabberContacts: ['a@b.com', 'c@d.com']
  ],
  a2 : [
    scmSchedule : '0 3 * * *',
    rebuilderStep: Values.rebuilderStepForWww,
    testngStep: Values.testngStepForIntegration,
    jabberContacts: ['a@b.com', 'c@d.com']
  ],
  q1 : [
    scmSchedule : '0 3 * * *',
    rebuilderStep: Values.rebuilderStepForQa,
    testngStep: Values.testngStepForIntegration,
  ],
  q2 : [
    scmSchedule : '0 3 * * *',
    rebuilderStep: Values.rebuilderStepForQa,
    testngStep: Values.testngStepForIntegration,
    jabberContacts: ['a@b.com', 'c@d.com']
  ],
]

/**
  Default svn urls for jobs that do not have an existing SCM configuration.
**/
def svnDefaultLocations = ([
  'ApiCommonData'        :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/trunk',
  'ApiCommonShared'      :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/trunk',
  'ApiCommonWebService'  :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonWebService/trunk',
  'ApiCommonWebsite'     :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonWebsite/trunk',
  'CBIL'                 :  'https://www.cbil.upenn.edu/svn/gus/CBIL/trunk',
  'EuPathSiteCommon'     :  'https://www.cbil.upenn.edu/svn/apidb/EuPathSiteCommon/trunk',
  'EuPathWebSvcCommon'   :  'https://www.cbil.upenn.edu/svn/apidb/EuPathWebSvcCommon/trunk',
  'FgpUtil'              :  'https://www.cbil.upenn.edu/svn/gus/FgpUtil/trunk',
  'GBrowse'              :  'https://www.cbil.upenn.edu/svn/apidb/GBrowse/trunk',
  'WDK'                  :  'https://www.cbil.upenn.edu/svn/gus/WDK/trunk',
  'WSF'                  :  'https://www.cbil.upenn.edu/svn/gus/WSF/trunk',
  'install'              :  'https://www.cbil.upenn.edu/svn/gus/install/trunk'
]).asImmutable()

// convert SubversionSCM.ModuleLocation fields to a map
def moduleLocations(job, svnDefaultLocations) {
  if (job == null) {
    println "New job, using default svn locations"
    return svnDefaultLocations
  }
  println "Existing job, using existing svn locations"
  def locations = [:]
  job.scm.locations.each{
    locations.put(it.local, it.remote)
  }
  return locations
}


//println JobConfigurator(console).donedo("something")

productSpecificConfig.each {
  def product = it.key
//  ['integrate'].each {
  hostnames.each {
    def host = it
    def jobName = "${host}.${product.toLowerCase()}.org"
    def webapp = productSpecificConfig[product]['webapp']
    println "Creating job for " + jobName
    def existingJob = jenkins.getJob(jobName)

    job {
      name jobName
      //using "TMPL-eupathdb-website"

      // Restrict where project can be run
      label 'master'
      
      description """
<a href='http://${jobName}'>http://${jobName}</a>
<p>
See <a href="https://mango.ctegd.uga.edu/apiwiki/index.php/JenkinsWebsiteBuilds">JenkinsWebsiteBuilds wiki</a> for build overview.
"""      
      // Discard old builds
      //logRotator(daysToKeepInt, numToKeepInt, artifactDaysToKeepInt, artifactNumToKeepInt)
      logRotator(7, -1, -1, -1)

      quietPeriod(180)

      customWorkspace('/var/www/' + jobName + '/project_home')
      
      scm getSvnLocations(moduleLocations(existingJob, svnDefaultLocations))

      triggers {
          // Poll SCM schedule
          scm(hostSpecificConfig[host]['scmSchedule'])
      }
      
      timeout('absolute') { limit 20 }
      
      steps() {
        if ( hostSpecificConfig[host].containsKey('rebuilderStep') ) {
          shell( hostSpecificConfig[host]['rebuilderStep'](host, product, webapp) )
        }

        if ( hostSpecificConfig[host].containsKey('testngStep') ) {
          def clos = hostSpecificConfig[host]['testngStep'](host, product, webapp)
          ant(clos) 
        }
      }
  
      if (host == 'integrate') {
       // configure disableQABuilds(product)
      }


      configure jabberNotification(host)
      configure testngPubliser()


      publishers {
        extendedEmail('me@halfempty.org', '$DEFAULT_SUBJECT', '${JELLY_SCRIPT,template="eupath-email-ext"}') {
            trigger(
              triggerName: 'Unstable',
              subject: '$PROJECT_DEFAULT_SUBJECT',
              body: '$PROJECT_DEFAULT_CONTENT',
              sendToDevelopers: false, 
              sendToRequester: false, 
              includeCulprits: false, 
              sendToRecipientList: true,
            )
            trigger(
              triggerName: 'Failure', 
              subject: '$PROJECT_DEFAULT_SUBJECT',
              body: '$PROJECT_DEFAULT_CONTENT',
              sendToDevelopers: true, 
              sendToRequester: true, 
              includeCulprits: true, 
              sendToRecipientList: true,
            )
            configure { node ->
                node / contentType << 'html'
            }
        }

      }

      
    } // job
  } // hostname.each
} // productSpecificConfig.each


def jabberNotification(host) {
  if ( ! hostSpecificConfig[host].containsKey('jabberContacts') ) return {}
  
  {
    project -> project/publishers/'hudson.plugins.jabber.im.transport.JabberPublisher' {
      targets {
        hostSpecificConfig[host]['jabberContacts'].each { contact ->
         'hudson.plugins.im.DefaultIMMessageTarget' { value contact }
        }
      }
      strategy 'FAILURE_AND_FIXED'
      notifyOnBuildStart false
      notifySuspects false
      notifyCulprits false
      notifyFixers false
      notifyUpstreamCommitters false
    }
  }

}


def disableQABuilds(product) {
  {project -> project/publishers/'hudson.plugins.parameterizedtrigger.BuildTrigger' {
      'configs'  { 
        'hudson.plugins.parameterizedtrigger.BuildTriggerConfig' {
          'configs' {
            'hudson.plugins.parameterizedtrigger.PredefinedBuildParameters' {
              properties "JENKINS_JOBS=q1.${product.toLowerCase()}.org q2.${product.toLowerCase()}.org"
            }
          }
          projects '~disablejobs'
          condition 'FAILED'
        }
      }
    }
  }
}


/**
    <hudson.plugins.testng.Publisher plugin="testng-plugin@1.5">
      <reportFilenamePattern>test_home/results/**</reportFilenamePattern>
      <escapeTestDescp>true</escapeTestDescp>
      <escapeExceptionMsg>true</escapeExceptionMsg>
    </hudson.plugins.testng.Publisher>
**/
def testngPubliser() {
  {project -> project/publishers/'hudson.plugins.testng.Publisher' {
    reportFilenamePattern 'test_home/results/*'
    escapeTestDescp 'true'
    escapeExceptionMsg 'true'
  }
  }
}

def getSvnLocations(svnLocations) {
  {it ->
      def installUrl = svnLocations['install']
      if (installUrl == null) 
        throw new java.lang.NullPointerException("SCM location for 'install' is not defined'")
      svn(installUrl, 'install') {
        svnLocations.each { localValue, remoteValue -> 
          if (localValue == 'install') { return }
          it / locations << 'hudson.scm.SubversionSCM_-ModuleLocation' {
            remote remoteValue
            local localValue
          }
      }
    }
  }
}


/**

  configure {
    project -> project/clean('boo')    
    
  }

The word 'project' can be anything; it represents the root of the Node.


  configure {
    project -> project/clean {
      publishers 'too'
    }
  }

generates
    <clean>
        <publishers>too</publishers>
    </clean>


**/