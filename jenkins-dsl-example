/**

"triggers{scm()}" appends, does not replace so the template should not have a "Poll SCM" Build Trigger

**/

/**

TODO: Generate job configuration map by iterating over hosts and products, then use the map
to create jobs. This allows a single job to be manually defined.
[
    'integrate.toxodb.org' : [
        webapp:'toxo',
        scmSchedule:'1/5 ',
    ]
]
**/


def jenkins = hudson.model.Hudson.instance

def products = ["AmoebaDB", "CryptoDB"]

def hostnames =  ["q1", "q2", "integrate"]

/**
webappForProduct = [
  AmoebaDB:"amoeba", 
  CryptoDB:"cryptodb",
  EuPathDB:"eupathdb",
  GiardiaDB:"giardiadb",
  HostDB:"hostdb",
  MicrosporidiaDB:"micro",
  PiroplasmaDB:"piro",
  PlasmoDB:"plasmo",
  ToxoDB:"toxo",
  TrichDB:"trichdb",
  TriTrypDB:"tritrypdb",
  FungiDB:"fungidb"
]
**/

webappForProduct = [
  CryptoDB:"cryptodb",
]

hostSpecificConfig = [
  integrate : [
    scmSchedule : '*/5 * * * *'
  ],
  a1 : [
    scmSchedule : '0 3 * * *'
  ],
  a2 : [
    scmSchedule : '0 3 * * *'
  ],
  q1 : [
    scmSchedule : '0 3 * * *'
  ],
  q2 : [
    scmSchedule : '0 3 * * *'
  ],
]

/**
  Default svn urls for jobs that do not have an existing SCM configuration.
**/
def svnDefaultLocations = ([
  'ApiCommonData'        :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/trunk',
  'ApiCommonShared'      :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/trunk',
  'ApiCommonWebService'  :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonWebService/trunk',
  'ApiCommonWebsite'     :  'https://www.cbil.upenn.edu/svn/apidb/ApiCommonWebsite/trunk',
  'CBIL'                 :  'https://www.cbil.upenn.edu/svn/gus/CBIL/trunk',
  'EuPathSiteCommon'     :  'https://www.cbil.upenn.edu/svn/apidb/EuPathSiteCommon/trunk',
  'EuPathWebSvcCommon'   :  'https://www.cbil.upenn.edu/svn/apidb/EuPathWebSvcCommon/trunk',
  'FgpUtil'              :  'https://www.cbil.upenn.edu/svn/gus/FgpUtil/trunk',
  'GBrowse'              :  'https://www.cbil.upenn.edu/svn/apidb/GBrowse/trunk',
  'WDK'                  :  'https://www.cbil.upenn.edu/svn/gus/WDK/trunk',
  'WSF'                  :  'https://www.cbil.upenn.edu/svn/gus/WSF/trunk',
  'install'              :  'https://www.cbil.upenn.edu/svn/gus/install/trunk'
]).asImmutable()

// convert SubversionSCM.ModuleLocation fields to a map
def moduleLocations(job, svnDefaultLocations) {
  if (job == null) {
    println "New job, using default svn locations"
    return svnDefaultLocations
  }
  println "Existing job, using existing svn locations"
  def locations = [:]
  job.scm.locations.each{
    locations.put(it.local, it.remote)
  }
  return locations
}

webappForProduct.each {
  def product = it.key
//  ['integrate'].each {
  hostnames.each {
    def host = it
    def jobName = "${host}.${product.toLowerCase()}.org"
    println "Creating job for " + jobName
    def existingJob = jenkins.getJob(jobName)
    job {
      name jobName
      using "TMPL-eupathdb-website"

      label 'master'
      
      triggers {
          scm(hostSpecificConfig[host]['scmSchedule'])
      }
      
      description """
<a href='http://${jobName}'>http://${jobName}</a>
<p>
See <a href="https://mango.ctegd.uga.edu/apiwiki/index.php/JenkinsWebsiteBuilds">JenkinsWebsiteBuilds wiki</a> for build overview.
"""      
      // copy the map to prevent modifications of original
      def defaultSvn = [:]
      defaultSvn << svnDefaultLocations

      scm getSvnLocations(moduleLocations(existingJob, defaultSvn))
    
      steps {
        shell(
          integrationRebuilderStep(host, product)
        )
        ant() {
          targets(['cleantestresults', 'cleaninstall', 'testbynames'])
          props('proj':'EuPathSiteCommon', 'comp':'Watar', 'targetDir':'$WORKSPACE/test_home', 'projectsDir':'$WORKSPACE', 'baseurl':"http:/${host}.${product.toLowerCase()}.org", 'webappname':"${webappForProduct[product]}.integrate", 'testnames':'"Integration"')
          buildFile 'EuPathSiteCommon/Watar/build.xml'
        }
      }
  
      if (host == 'integrate') {
        configure disableQABuilds(product)
      }

      
      configure { root ->
        root / publishers / 'hudson.plugins.jabber.im.transport.JabberPublisher' {
          targets {
          //  'hudson.plugins.im.DefaultIMMessageTarget' { value 'mheiges@gmail.com' }
          //  'hudson.plugins.im.DefaultIMMessageTarget' { value 'mheiges@apidb.org' }
          }
          strategy 'FAILURE_AND_FIXED'
          notifyOnBuildStart false
          notifySuspects false
          notifyCulprits false
          notifyFixers false
          notifyUpstreamCommitters false
        }
      }


    }
  }
}


def testStep() {
  return 'exit 0'
}

def integrationRebuilderStep(String host, String product) {
  return """
date > .hudsonTimestamp
env
sudo instance_manager stop ${product} force
sleep 5
sudo instance_manager start  ${product}
sleep 15
\$HOME/bin/rebuilder-jenkins ${host}.${product.toLowerCase()}.org --webapp ${product}:${webappForProduct[product]}.integrate
  """
}

def disableQABuilds(product) {
  {project -> project/publishers/'hudson.plugins.parameterizedtrigger.BuildTrigger' {
      'configs'  { 
        'hudson.plugins.parameterizedtrigger.BuildTriggerConfig' {
          'configs' {
            'hudson.plugins.parameterizedtrigger.PredefinedBuildParameters' {
              properties "JENKINS_JOBS=q1.${product.toLowerCase()}.org q2.${product.toLowerCase()}.org"
            }
          }
          projects '~disablejobs'
          condition 'FAILED'
        }
      }
    }
  }
}

def getSvnLocations(svnLocations) {
  {it ->
      def installUrl = svnLocations['install']
      if (installUrl == null) 
        throw new java.lang.NullPointerException("SCM location for 'install' is not defined'")
      svn(installUrl, 'install') {
        svnLocations.each { localValue, remoteValue -> 
          if (localValue == 'install') { return }
          it / locations << 'hudson.scm.SubversionSCM_-ModuleLocation' {
            remote remoteValue
            local localValue
          }
      }
    }
  }
}


/**

  configure {
    project -> project/clean('boo')    
    
  }

The word 'project' can be anything; it represents the root of the Node.


  configure {
    project -> project/clean {
      publishers 'too'
    }
  }

generates
    <clean>
        <publishers>too</publishers>
    </clean>


**/